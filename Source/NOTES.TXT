2013.01.07m
Ran into an unexpected problem with the allocation of the arrays. When we make the variable for holding the datatype for inputdata and output data for the IfW_Calculate routine, we might have to reallocate at each timestep. This is because the number of points we need information for might change (likely won't, but this could introduce a bug later if we do).

Anyhow, now I need to figure out how to allocate the receiving array also.



New plan:
   -- Interface layer --> modify IfW_Module to handle the revisions to HHWind and FFWind
   -- do the other modules
   -- Make the Driver work with paraprint
   -- merge all the wind file types together (if possible)
   -- write documentation on use


Things to add/decide on sometime:
   -  In the driver, add some help info with the -h flag.
   -  In the driver, add some additional info with the -v for verbose flag
   -  What should I do with the InflowWind_Module_Types --> specifies file types numbering scheme.


Things to remember to change:
   -- UnWind -> UnitWind --> get this during init (stored in OtherStates)


-=-=-=-
-=-=-=-

Architectural question:
   Should we use a single common set of types in all sub-modules, or does each module keep its own types?



Module:
   TODO:
      -  figure out what types should be common to all the module pieces.
         -  Copy over what is needed from the HHWind one.
         -  Make the HHWind use the global types rather than its own.
         -  figure out how to make that work with userwind.
      -  Figure out a good way to copy things from one type to another
      -  Change how newline is handled -> add to the end of the ErrMsg, not when appending
         -->   TRIM(ErrMsg)//Newline//TRIM(TmpErrMsg) becomes TRIM(ErrMsg)//TRIM(TmpErrMsg)//NewLine
         -->   Verify that this actually works as intended (Extra lines, or does the Newline get chopped by TRIM?)

   Completed:
      +  Put the InflowWind_Module_Types.f90 contents into something else (standard registry type perhaps?)
      +  Make HHWind_End and FFWind_End use the DestroyContState/DestroyDiscState/DestroyConstrSttae/DestroyOtherState/DestroyOutput/DestroyParam/DestroyInput routines created by the registry. (see example)

Driver:
   TODO:
      -  Make sure that HHWind works correctly
      -  Add in


Test Programs:
   TODO:
      -  change test programs to allow for input filenames -> default to the specified if name not given (with warning)    ***NEXT***
      -  Add in tests of the empty state routines




Documentation:
   TODO:
      -  explain input
      -  explain outputs
      -  explain structure of the code
      -  Explain what has been hacked out (linearize, hacks, etc)
      -  Explain how to use UserWnd
      -  Explain name changes???
      -  planned features
         -  storing info about the "grid size/stepsize/time length" of the file read in --> this exists already. The driver just doesn't recognize it.




-=-=-=-=-=-=-=-=- MOSTLY COMPLETED / COMPLETED -=-=-=-=-=-=-=-=-

IfW_FFWind.f90
   TODO:

   COMPLETED:
      +  Convert the READ statements to the new library ones.
      +  Convert the Allocate statements to the new library ones.
      +  convert Init routines
      +  convert End routine
      +  make CalcOutput routine
      +  Change all WrScr calls to ErrMsg concatenations
      +  remove the global variables
      +  FFWind test routine
      +  Revisit End routine to make sure that we actually close out all the variables that we need to (reset things)


IfW_HHWind.f90
   TODO:

   COMPLETED:
      +  properly allocate array for the output
      +  step through all points
      +  Err handling in CalcOutput
      +  Err handling in the GetWindSpeed function (upgrade to use ErrID levels etc)
      +  Err handling in Init
      +  Err handling in End
      +  Add the other modular framework required routines into the file.
      +  HHWind test routine
      +  Setup regression test with HHWind


-=-=-=-=-=-=-=-=- NOTES -=-=-=-=-=-=-=-=-
NOTES:
After talking with Bonnie, we will not do reallocation of arrays within the IfW_CalcOutput routine. Instead, we will just do error checking there to make sure they are allocated the same size. The rest will be handled by the glue code.

